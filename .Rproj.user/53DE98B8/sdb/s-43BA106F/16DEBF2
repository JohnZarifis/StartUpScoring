{
    "contents" : "# ML app for Scoring Startups...\n\n\nshinyServer(function(input, output, session) {\n  \n  \n  volumes <- c('Project Files' = getwd())  #getVolumes() #c('R Installation'=R.home())\n  fileChoose<- shinyFileChoose(input, 'file', roots=volumes, session=session, restrictions=system.file(package='base'))\n  #print(fileChoose)\n  \n  Market <- reactive({\n    if (is.null(fileChoose)){return()}\n      \n    fileSelected <- parseFilePaths(volumes, input$file)\n    Market <- read_excel(as.character(fileSelected$datapath), sheet = 1 ,col_names = TRUE, na='na')\n    colnames( Market ) <- str_replace_all(colnames( Market ), c(\" \" = \"\", \"-\" = \".\",\"%\"=\".perc\"))\n    i <- sapply(Market, is.character)\n    Market[i] <- lapply(Market[i], as.factor)\n    #View(Market)\n    \n    return(Market)\n  })\n   MarketFiltered <- reactive({\n      Mark <- Market()\n      MarketFiltered <- Mark[input$Market_rows_all,]\n      View(MarketFiltered)\n      return(MarketFiltered)\n   })\n  \n  predicted <- reactive({\n    \n            M = input$marketSize \n            P = input$pSize\n            Q = input$qSize\n            t1 = as.integer(input$Years[1])\n            t2 = as.integer(input$Years[2])\n            Inc = as.numeric(input$Price)\n            #level = as.numeric(input$interval)\n            Sales <- Bass.Default.Model(M,P,Q,t1,t2,Inc)\n            return(Sales)\n  })\n  \n  #---------------------------------------------------------------------------------------------------\n  #     Dygraph (Data)\n  #---------------------------------------------------------------------------------------------------\n\n  output$dygraph <- renderDygraph({\n    DataToPlot <- predicted()\n    \n    if(is.null(input$checkGroup))\n      return()\n    #if(length(input$checkGroup)== 1){\n      DataToPlot <- DataToPlot[,input$checkGroup]\n      dygraph(DataToPlot, main = \"Predicted New Sales (Tons/Year)\") %>%\n      dyOptions(drawGrid = input$showgrid,strokeWidth = 3,fillGraph = input$fillGraph, fillAlpha = 0.4)%>% \n      dyRangeSelector() %>%\n      dyAxis( \n            name=\"x\"\n            ,axisLabelFormatter = \"function(d){ return d.getFullYear() }\")\n#     } # if i want secondary axis\n#     else {\n#       DataToPlot <- DataToPlot[,input$checkGroup]\n#       firstAx <- head(input$checkGroup,n=-1)\n#       SecondAx <-tail(input$checkGroup,1)\n#       #print(firstAx)\n#       #print(SecondAx)\n#       #DataToPlot <- DataToPlot[,firstAx]\n#       dygraph(DataToPlot, main = \"Predicted New Sales (Tons/Year)\") %>%\n#       dyOptions(drawGrid = input$showgrid,strokeWidth = 3,fillGraph = input$fillGraph, fillAlpha = 0.4)%>% \n#       dyRangeSelector() %>%\n#       dyAxis( \n#         name=\"x\"\n#         ,axisLabelFormatter = \"function(d){ return d.getFullYear() }\"\n#       \n#        )%>%\n#        dyAxis(\"y\", label = \"Tons of Production\") %>%\n#        dyAxis(\"y2\", label = \"Euro/Year\", independentTicks = TRUE) %>%\n#        dySeries(SecondAx, axis = 'y2')\n#       \n#     }\n    \n      \n  })\n  \n  #---------------------------------------------------------------------------------------------------\n  #     Dislpay dataset (Data)\n  #---------------------------------------------------------------------------------------------------\n  # Dislpay dataset\n  SalesToDF <- function(){\n    Sales <- predicted() \n    # convert it to data frame\n    Sales <- data.frame(Year = substr(index(Sales), 1, 4), coredata(Sales))\n    Sales <- Sales[c('Year',input$checkGroup)]\n    return(Sales)\n  }\n  \n  output$Sales <- DT::renderDataTable(\n    \n       SalesToDF()\n       ,server = FALSE\n       , class='compact'\n       , rowname = FALSE, caption='Predicted Sales'\n       , filter = 'top'\n       #,extensions = 'FixedHeader' # not working . double headers\n       ,extensions = 'ColVis'\n       , options = list(\n           dom = 'C<\"clear\">lfrtip',\n           colVis = list(exclude = c(0))\n           ,autoWidth=TRUE,pageLength = 15\n                        )\n       )\n       \n  \n##### Market Size Data table.\n  output$Market <- DT::renderDataTable(\n                   Market()\n                  ,server = FALSE\n                  , class='compact'\n                  , rowname = FALSE\n                  , caption='Market Size'\n                  , filter = 'top'\n                  ,extensions = c('ColVis','ColReorder')\n                  , options = list(\n                      dom = 'C<\"clear\">lfrtip'\n                     ,colVis = list(exclude = c(0))\n                     ,autoWidth=TRUE,pageLength = 15\n                                  ) \n                  )\n                 \n  \n  ###### Pivot #########\n  output$MarketPivot <- renderRpivotTable({\n    if(is.null(Market())) {\n      return()\n    }\n    rpivotTable(data =   Market()   \n#                 ,rows = c( \"Party\",    \"Province\")\n#                 ,vals = \"votes\"\n#                 ,aggregatorName = \"Sum\"\n#                 , rendererName = \"Treemap\"\n                )\n  } )\n  \n#   output$MarketFilter <- DT::renderDataTable({\n#     \n#     DT::datatable(MarketFiltered()  \n#                   , class='compact', rowname = FALSE, caption='Predicted Sales',\n#                   filter = 'top', options=list(lengthChange = FALSE) )\n#     #server = FALSE\n#   })              \n\n  MarketToXts <- function(){\n    class(input$Sales_rows_all)\n    str(input$Sales_rows_all)\n    print(input$Sales_rows_all)\n    Mark <- Market()\n    View(Mark)\n    \n    ToForecast <- Mark[input$Sales_rows_all,, drop = FALSE]\n    View(ToForecast)\n    #ToForecast.ts <- ts(ToForecast[,-1], start = t1, frequency = 1)\n    #dates <- ToForecast[1]\n    #values <- ToForecast[,-1]\n    #ToForecast.xts <-as.xts(values, order.by = as.Date(\n    #  paste0(dates,\"-01-01\",format=\"%Y-01-01\")\n    #))\n    \n    #return(sales.xts)\n    #return(ToForecast.xts)\n    return(ToForecast)\n  }\n  \n  output$dygraphPred <- DT::renderDataTable(\n    \n    MarketFiltered() %>% group_by(Year) %>% summarise(sum(Production))\n   \n  )\n\n\n\n#output$dygraphPred <- renderDygraph({\n   #ToForecast <- Market[input$Sales_rows_all,]\n   #View(ToForecast)\n#    hw <- HoltWinters(ldeaths)\n#    p <- predict(hw, n.ahead = 36, prediction.interval = TRUE)\n#    all <- cbind(ldeaths, p)\n#    dygraph(all, \"Deaths from Lung Disease (UK)\") %>%\n#      dySeries(\"ldeaths\", label = \"Actual\") %>%\n#      dySeries(c(\"p.lwr\", \"p.fit\", \"p.upr\"), label = \"Predicted\")  \n#})\n\n\n# Debugging\n# output$x5 = renderPrint({ # for debugging reasons\n#   cat('\\nAll rows (same as rows_current in the server mode):\\n\\n')\n#   cat(input$Sales_rows_all, sep = ' | ')\n#   cat('\\n')\n#   cat('Rows on the current page:\\n\\n')\n#   cat(input$Sales_rows_current, sep = ' | ')\n#   cat('\\n')\n#   cat('\\nSelected rows:\\n\\n')\n#   cat(input$Sales_rows_selected, sep = ' | ')\n  \n})\n\n\n#})\n",
    "created" : 1434694663112.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3931271170",
    "id" : "16DEBF2",
    "lastKnownWriteTime" : 1434726377,
    "path" : "~/Projects/StartUpScoring/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}